#include <unistd.h>
#include <sys/types.h>
#include <stdio.h>
#include <errno.h>
#include <cstdlib>
#include <cstring>
#include <wait.h>




int main(int argc, char **argv) {
    pid_t pid, old_pid, new_pid;
    pid_t child, parent;
    parent = getppid();

    int fork_ans = child = fork();
    int state;
    waitpid(-1, &state, WNOHANG);

    if (fork_ans < 0) {
        printf("fork fail\n");
        fprintf(stderr, "%s:fork of children failed:%s\n", argv[0], strerror(errno));
        exit(1);
    } else if (child == 0) {
        printf("child is 0\n");
        exit(0);
        old_pid = getppid();
        sleep(2);
        new_pid = getppid();
    } else {
        printf("child is bigger than 0\n");
        sleep(1000);
    }
    printf("Original parent:%d\n", parent);
    printf("Child:%d\n", getpid());
    printf("Child's old ppid:%d\n", old_pid);
    printf("Child's new ppid:%d\n", new_pid);

    exit(0);
}



#include <unistd.h>
#include <sys/types.h>
#include <stdio.h>
#include <errno.h>
#include <cstdlib>
#include <cstring>

int main(int argc,char ** argv) {
    pid_t pid,old_pid,new_pid;
    pid_t child,parent;
    parent=getppid();

    if((child=fork())<0){
        printf("fork fail\n");
        fprintf(stderr,"%s:fork of children failed:%s\n",argv[0],strerror(errno));
        exit(1);
    } else if(child==0){
        printf("child is 0\n");
        old_pid=getppid();
        sleep(2);
        new_pid=getppid();
    }else{
        printf("child is bigger than 0\n");
        sleep(1);
        exit(0);
    }
    printf("Original parent:%d\n",parent);
    printf("Child:%d\n",getpid());
    printf("Child's old ppid:%d\n",old_pid);
    printf("Child's new ppid:%d\n",new_pid);

    exit(0);
}

#include <unistd.h>
#include <sys/types.h>
#include <stdio.h>
#include <errno.h>
#include <cstdlib>
#include <cstring>
#include <wait.h>

void f(int sid){
    int state;
    if (sid==SIGCHLD){
        waitpid(-1, &state, WNOHANG);
    }
    return;
}


int main(int argc, char **argv) {
    pid_t pid, old_pid, new_pid;
    pid_t child, parent;
    parent = getppid();

    int fork_ans = child = fork();

    signal(SIGCHLD,f);

    if (fork_ans < 0) {
        printf("fork fail\n");
        fprintf(stderr, "%s:fork of children failed:%s\n", argv[0], strerror(errno));
        exit(1);
    } else if (child == 0) {
        printf("child is 0\n");
        exit(0);
        old_pid = getppid();
        sleep(2);
        new_pid = getppid();
    } else {
        printf("child is bigger than 0\n");
        sleep(1000);
    }
    printf("Original parent:%d\n", parent);
    printf("Child:%d\n", getpid());
    printf("Child's old ppid:%d\n", old_pid);
    printf("Child's new ppid:%d\n", new_pid);
    sleep(1000);

}
